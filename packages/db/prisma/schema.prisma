// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  FACEBOOK
  GITHUB
  CREDENTIALS
}

model User {
  id            String  @id
  name          String
  email         String
  emailVerified Boolean
  image         String?

  fileId String?

  bio      String?
  location String?
  website  String?

  github   String?
  linkedin String?
  X        String?

  createdAt DateTime
  updatedAt DateTime
  sessions  Session[]
  accounts  Account[]

  submittedResults SubmittedResult[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Language {
  CPP
  C
  JS
  PYTHON
}

model TestCase {
  id        Int     @id @unique @default(autoincrement())
  problemId Int
  input     String
  output    String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  hidden    Boolean @default(false)
}

model CustomTestCase {
  id        Int     @id @unique @default(autoincrement())
  problemId Int
  input     String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

enum Level {
  STARTER
  APPRENTICE
  CHALLENGER
  EXPERT
  LEGENDARY
}

model DriverCode {
  id              Int      @id @unique @default(autoincrement())
  language        Language @default(CPP)
  beforeCode      String
  afterCode       String
  placeHolderCode String   @default("")
  problemId       Int
  Problem         Problem  @relation(fields: [problemId], references: [id])
}

model Problem {
  id             Int          @id @unique @default(autoincrement())
  title          String       @unique
  description    String
  slug           String       @unique
  constraints    String[]
  topics         Topic[]
  level          Level        @default(STARTER)
  driverCodes    DriverCode[]
  acceptanceRate Float        @default(0)
  timeLimit      Float        @default(5.0)
  memoryLimit    Float        @default(10.0)

  testCases        TestCase[]
  exampleTestCases ExampleTestCases[]
  submittedResults SubmittedResult[]
  createdAt        DateTime           @default(now())
  customTestCases  CustomTestCase[]

  contestProblems ContestProblem[]
}

model ExampleTestCases {
  id          Int     @id @unique @default(autoincrement())
  problemId   Int
  input       String
  description String
  output      String
  problem     Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model SubmittedResult {
  id              Int              @id @unique @default(autoincrement())
  problemId       Int
  userId          String
  code            String
  status          SubmissionStatus @default(ACCEPTED)
  isAccepted      Boolean          @default(false)
  language        Language
  runtime         Float
  memory          Float
  testCasesPassed Int              @default(0)

  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Contest {
  id          Int         @id @unique @default(autoincrement())
  title       String
  description String?
  slug        String      @unique
  startTime   DateTime
  endTime     DateTime
  private     Boolean     @default(false)
  type        ContestType @default(DAILY)

  invitedParticipants String[]
  participants        String[]

  contestProblems ContestProblem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContestProblem {
  id        Int @id @unique @default(autoincrement())
  contestId Int
  problemId Int

  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

enum ContestType {
  WEEKLY
  BIWEEKLY
  MONTHLY
  DAILY
  OCCASSIONAL
  LOCAL
}

enum SubmissionStatus {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

enum Topic {
  ARRAY
  STRING
  TWO_POINTERS
  SLIDING_WINDOW
  PREFIX_SUM
  BIT_MANIPULATION
  LINKED_LIST
  STACK
  QUEUE
  HASH_TABLE
  HEAP
  GRAPH
  BINARY_TREE
  BINARY_SEARCH_TREE
  TRIE
  SEGMENT_TREE
  FENWICK_TREE
  UNION_FIND
  DOUBLY_LINKED_LIST
  DEQUE
  RECURSION
  BACKTRACKING
  BINARY_SEARCH
  SORTING
  GREEDY
  DYNAMIC_PROGRAMMING
  NUMBER_THEORY
  BITWISE_OPERATIONS
  SUFFIX_ARRAY
}
