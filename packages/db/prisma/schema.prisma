// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  FACEBOOK
  GITHUB
  CREDENTIALS
}

model User {
  id       Int      @id @unique @default(autoincrement())
  name     String
  username String   @unique
  email    String
  password String   @default("")
  provider Provider @default(CREDENTIALS)

  submittedResults SubmittedResult[]
  profilePic       Image?
}

model Image {
  id       Int    @id @unique @default(autoincrement())
  publicId String
  url      String
  userId   Int?   @unique
  user     User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Language {
  CPP
  C
  JS
  PYTHON
}

model TestCase {
  id        Int     @id @unique @default(autoincrement())
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

enum Level {
  EASY
  MEDIUM
  HARD
}

model Problem {
  id          Int     @id @unique @default(autoincrement())
  title       String  @unique
  description String
  topics      Topic[]
  level       Level   @default(EASY)
  driverCode  String

  testCases        TestCase[]
  exampleTestCases ExampleTestCases[]
  submittedResults SubmittedResult[]
  createdAt        DateTime           @default(now())
}

model ExampleTestCases {
  id          Int     @id @unique @default(autoincrement())
  problemId   Int
  input       String
  description String
  output      String
  problem     Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model SubmittedResult {
  id         Int      @id @unique @default(autoincrement())
  problemId  Int
  userId     Int
  code       String
  isAccepted Boolean  @default(false)
  language   Language
  runtime    Float

  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum Topic {
  ARRAY
  STRING
  TWO_POINTERS
  SLIDING_WINDOW
  PREFIX_SUM
  BIT_MANIPULATION
  LINKED_LIST
  STACK
  QUEUE
  HASH_TABLE
  HEAP
  GRAPH
  BINARY_TREE
  BINARY_SEARCH_TREE
  TRIE
  SEGMENT_TREE
  FENWICK_TREE
  UNION_FIND
  DOUBLY_LINKED_LIST
  DEQUE
  RECURSION
  BACKTRACKING
  BINARY_SEARCH
  SORTING
  GREEDY
  DYNAMIC_PROGRAMMING
  NUMBER_THEORY
  BITWISE_OPERATIONS
  SUFFIX_ARRAY
}
